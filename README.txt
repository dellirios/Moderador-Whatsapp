# Projeto Painel de ModeraÃ§Ã£o para WhatsApp com Bot Interativo

## VisÃ£o Geral do Projeto

Este projeto consiste num sistema de moderaÃ§Ã£o para grupos do WhatsApp, composto por:

1.  **Backend (Node.js + Express + whatsapp-web.js):**
    * Conecta-se ao WhatsApp atravÃ©s da biblioteca `whatsapp-web.js`.
    * Monitoriza mensagens em grupos autorizados.
    * Deteta palavras proibidas e sensÃ­veis.
    * Aplica advertÃªncias e outras aÃ§Ãµes de moderaÃ§Ã£o automaticamente.
    * Responde a comandos especÃ­ficos (ex: `!denuncia`).
    * Fornece uma API REST para o frontend gerir configuraÃ§Ãµes, visualizar eventos e interagir com o bot.
    * Armazena dados (configuraÃ§Ãµes, listas de palavras, eventos, advertÃªncias, etc.) em ficheiros JSON locais.

2.  **Frontend (React + Next.js + Tailwind CSS + Shadcn/UI):**
    * Um painel de administraÃ§Ã£o web para moderadores.
    * Permite visualizar o status da conexÃ£o do WhatsApp e escanear QR Code.
    * Gerir listas de grupos autorizados para monitorizaÃ§Ã£o.
    * Gerir listas de palavras proibidas e sensÃ­veis.
    * Configurar o comportamento do bot (limite de advertÃªncias, aÃ§Ã£o de reincidÃªncia).
    * Visualizar um histÃ³rico detalhado de eventos de moderaÃ§Ã£o (mensagens filtradas, advertÃªncias, denÃºncias).
    * Gerar relatÃ³rios de atividade.
    * Gerir utilizadores banidos.
    * Rever e processar denÃºncias (manuais ou iniciadas por comando).
    * Interface com modo claro e escuro.

O objetivo Ã© fornecer uma ferramenta para ajudar na moderaÃ§Ã£o de comunidades em grupos do WhatsApp, automatizando algumas tarefas e centralizando o controlo e visualizaÃ§Ã£o de atividades.

## Funcionalidades Principais

* **ModeraÃ§Ã£o AutomÃ¡tica:**
    * DeteÃ§Ã£o de palavras proibidas com deleÃ§Ã£o de mensagem, aviso ao utilizador, PM ao infrator e notificaÃ§Ã£o a admins.
    * DeteÃ§Ã£o de palavras sensÃ­veis com registo para revisÃ£o.
    * Sistema de advertÃªncias com contagem e aÃ§Ãµes automÃ¡ticas (alerta, sugestÃ£o de silenciar/expulsar) ao atingir o limite.
* **InteraÃ§Ã£o via Comando no WhatsApp:**
    * Comando `!denuncia` para utilizadores iniciarem um processo de denÃºncia.
* **Painel de Controlo Web (Frontend):**
    * Dashboard com status do WhatsApp e QR Code.
    * GestÃ£o de grupos a serem monitorizados (com listagem de grupos da conta do bot).
    * GestÃ£o de palavras-chave (proibidas e sensÃ­veis).
    * ConfiguraÃ§Ãµes de moderaÃ§Ã£o (limite de advertÃªncias, aÃ§Ã£o de reincidÃªncia).
    * VisualizaÃ§Ã£o de histÃ³rico de eventos detalhado com filtros.
    * GeraÃ§Ã£o de relatÃ³rios de atividade.
    * GestÃ£o de utilizadores banidos.
    * SecÃ§Ã£o para revisÃ£o de denÃºncias e mensagens marcadas.
    * Interface responsiva e com tema claro/escuro.
* **PersistÃªncia de Dados:**
    * ConfiguraÃ§Ãµes, listas, eventos e advertÃªncias sÃ£o guardados em ficheiros JSON no backend.
* **API REST:**
    * ComunicaÃ§Ã£o entre o frontend e o backend para todas as operaÃ§Ãµes de gestÃ£o e visualizaÃ§Ã£o.

## Estrutura do Projeto (Sugerida)

/painel-moderador/â”œâ”€â”€ /painel-frontend/        # Projeto Next.js (Frontend)â”‚   â”œâ”€â”€ /app/â”‚   â”œâ”€â”€ /components/â”‚   â”‚   â””â”€â”€ ui/              # Componentes Shadcn/UIâ”‚   â”‚   â””â”€â”€ GraficoOfensasCliente.tsx # Exemplo de componente clienteâ”‚   â”œâ”€â”€ /lib/â”‚   â”‚   â””â”€â”€ utils.tsâ”‚   â”œâ”€â”€ next.config.mjsâ”‚   â”œâ”€â”€ package.jsonâ”‚   â”œâ”€â”€ postcss.config.jsâ”‚   â”œâ”€â”€ tailwind.config.tsâ”‚   â””â”€â”€ tsconfig.jsonâ”‚â””â”€â”€ /painel-backend/         # Projeto Node.js/Express (Backend)â”œâ”€â”€ /dados/              # Ficheiros JSON para persistÃªnciaâ”‚   â”œâ”€â”€ whatsapp_auth/   # Pasta para sessÃ£o do WhatsAppâ”‚   â”œâ”€â”€ advertencias.jsonâ”‚   â”œâ”€â”€ configuracoes.jsonâ”‚   â”œâ”€â”€ eventos_salvos.jsonâ”‚   â”œâ”€â”€ grupos_autorizados.jsonâ”‚   â”œâ”€â”€ palavras_proibidas.jsonâ”‚   â”œâ”€â”€ palavras_sensiveis.jsonâ”‚   â””â”€â”€ usuarios_banidos.jsonâ”œâ”€â”€ index.js             # Ficheiro principal do servidor backendâ”œâ”€â”€ package.jsonâ””â”€â”€ .env                 # Ficheiro para variÃ¡veis de ambiente
## Tecnologias Utilizadas

**Backend:**

* Node.js
* Express.js
* `whatsapp-web.js` (para interaÃ§Ã£o com o WhatsApp)
* `qrcode` (para gerar QR Code para o terminal e para o frontend)
* `cors`
* `dotenv`
* `uuid` (para gerar IDs Ãºnicos)
* Ficheiros JSON para persistÃªncia de dados

**Frontend:**

* React
* Next.js (App Router)
* TypeScript
* Tailwind CSS
* Shadcn/UI (para componentes de UI)
* Lucide React (para Ã­cones)
* Recharts (para grÃ¡ficos)
* Axios (para chamadas API)
* Framer Motion (para animaÃ§Ãµes)
* `next-themes` (para modo claro/escuro)

## ConfiguraÃ§Ã£o e InstalaÃ§Ã£o

### PrÃ©-requisitos

* Node.js (v18+ recomendado para `whatsapp-web.js`)
* NPM ou Yarn
* Um nÃºmero de WhatsApp dedicado para o bot (nÃ£o recomendado usar o seu nÃºmero pessoal principal).
* Google Chrome instalado (para Puppeteer, usado pelo `whatsapp-web.js`, a menos que configurado de outra forma).

### Backend (`/painel-backend/`)

1.  **Navegue atÃ© Ã  pasta do backend:**
    ```bash
    cd painel-backend
    ```
2.  **Instale as dependÃªncias:**
    ```bash
    npm install
    # ou
    yarn install
    ```
3.  **Crie o ficheiro de ambiente:**
    * Crie um ficheiro chamado `.env` na raiz da pasta `painel-backend`.
    * Adicione as seguintes variÃ¡veis (ajuste conforme necessÃ¡rio):
        ```env
        PORT=3001
        PAINEL_USER=admin
        PAINEL_PASS=admin123
        ```
4.  **Crie a pasta de dados:**
    * Dentro de `painel-backend`, crie uma pasta chamada `dados`. O script tentarÃ¡ criÃ¡-la se nÃ£o existir, mas Ã© bom garantir.
    * A subpasta `whatsapp_auth` serÃ¡ criada automaticamente pela `whatsapp-web.js` para guardar a sessÃ£o.

### Frontend (`/painel-frontend/`)

1.  **Navegue atÃ© Ã  pasta do frontend:**
    ```bash
    cd painel-frontend
    ```
2.  **Instale as dependÃªncias:**
    ```bash
    npm install
    # ou
    yarn install
    ```
3.  **Configure a URL da API (se necessÃ¡rio):**
    * No ficheiro `app/page.tsx` (ou onde `API_BASE_URL` estiver definido), certifique-se de que a constante `API_BASE_URL` aponta para o endereÃ§o do seu backend (por defeito `http://localhost:3001`).

## ExecuÃ§Ã£o do Projeto

### 1. Iniciar o Backend

1.  Navegue atÃ© Ã  pasta `/painel-backend/`.
2.  Execute o servidor:
    ```bash
    node index.js
    ```
3.  Na primeira vez (ou se a sessÃ£o expirar), um QR Code serÃ¡ exibido no terminal. Escaneie este QR Code com a aplicaÃ§Ã£o WhatsApp no telemÃ³vel que serÃ¡ usado para o bot.
4.  Aguarde a mensagem "âœ… WhatsApp conectado com sucesso!" no terminal.
5.  O servidor backend estarÃ¡ a correr em `http://localhost:3001` (ou na porta definida no `.env`).

### 2. Iniciar o Frontend

1.  Navegue atÃ© Ã  pasta `/painel-frontend/`.
2.  Execute o servidor de desenvolvimento Next.js:
    ```bash
    npm run dev
    # ou
    yarn dev
    ```
3.  Abra o seu navegador e aceda a `http://localhost:3000` (ou a porta indicada no terminal).
4.  DeverÃ¡ ver a interface do Painel de ModeraÃ§Ã£o.

## Funcionalidades do Bot WhatsApp (no Grupo)

* **DeteÃ§Ã£o de Palavras Proibidas:**
    * Se uma mensagem contiver uma palavra da lista de "Palavras Proibidas":
        * A mensagem original Ã© apagada (se o bot for admin).
        * O bot envia uma mensagem no grupo: `ğŸš« @[utilizador], a sua mensagem continha conteÃºdo inadequado e foi removida. Uma advertÃªncia foi registada.`
        * O bot tenta enviar uma PM ao utilizador: `ğŸ”” ADVERTÃŠNCIA ğŸ”” ... (detalhes da advertÃªncia) ...`
        * O bot notifica os admins do grupo: `ğŸ”” Alerta de ModeraÃ§Ã£o para Admins ğŸ”” ... O utilizador @[utilizador] recebeu uma advertÃªncia ...`
        * Uma advertÃªncia Ã© contabilizada para o utilizador.
* **DeteÃ§Ã£o de Palavras SensÃ­veis:**
    * Se uma mensagem contiver uma palavra da lista de "Palavras SensÃ­veis":
        * Um evento Ã© registado no sistema para revisÃ£o pelo moderador no painel. Nenhuma aÃ§Ã£o visÃ­vel ocorre no grupo.
* **Comando `!denuncia`:**
    * Qualquer membro do grupo pode enviar `!denuncia`.
    * O bot responde no grupo com instruÃ§Ãµes sobre como fornecer os detalhes da denÃºncia.
    * Um evento `denuncia_iniciada_comando` Ã© registado.
* **AÃ§Ãµes de ReincidÃªncia (AutomÃ¡ticas ao atingir limite de advertÃªncias):**
    * **Alerta (padrÃ£o):** Notifica os admins do grupo sobre o limite atingido.
    * **Sugerir Silenciar:** Notifica os admins sugerindo que silenciem o utilizador manualmente.
    * **Sugerir ExpulsÃ£o:** Se o bot for admin, tenta expulsar o utilizador. Caso contrÃ¡rio, notifica os admins para que o faÃ§am manualmente.

## Funcionalidades do Painel de ModeraÃ§Ã£o (Frontend)

* **Dashboard:**
    * Visualizar o status da conexÃ£o do WhatsApp.
    * Ver e escanear o QR Code se a conexÃ£o estiver pendente.
    * GrÃ¡fico de resumo de ofensas.
* **ConfiguraÃ§Ãµes:**
    * Definir o limite de advertÃªncias antes de uma aÃ§Ã£o de reincidÃªncia.
    * Escolher a aÃ§Ã£o de reincidÃªncia (Alerta, Silenciar, Expulsar).
* **ModeraÃ§Ã£o:**
    * **Grupos Permitidos:**
        * Listar os grupos da conta WhatsApp do bot (indicando se o bot Ã© admin).
        * Adicionar grupos (selecionando da lista ou inserindo ID manualmente) para monitorizaÃ§Ã£o.
        * Remover grupos da monitorizaÃ§Ã£o.
    * **Palavras Proibidas:** Adicionar e remover palavras que acionam advertÃªncias imediatas.
    * **Palavras SensÃ­veis:** Adicionar e remover palavras que sÃ£o apenas registadas para revisÃ£o.
* **HistÃ³rico:**
    * Visualizar uma lista cronolÃ³gica de todos os eventos registados pelo bot (mensagens proibidas, sensÃ­veis, advertÃªncias aplicadas, denÃºncias, etc.).
    * Filtrar eventos por utilizador, grupo ou conteÃºdo da mensagem.
    * OpÃ§Ã£o para buscar o histÃ³rico de advertÃªncias de um utilizador especÃ­fico.
* **RelatÃ³rios:**
    * Gerar um relatÃ³rio semanal de infraÃ§Ãµes (palavras proibidas/sensÃ­veis detetadas).
* **Banidos:**
    * Adicionar utilizadores (por ID) Ã  lista de banidos (o backend tentarÃ¡ removÃª-los de grupos monitorizados se o bot for admin e um grupo for especificado).
    * Remover utilizadores da lista de banidos.
* **Registro (RevisÃ£o de Mensagens):**
    * Visualizar eventos que requerem atenÃ§Ã£o do moderador (ex: denÃºncias manuais, mensagens com palavras sensÃ­veis marcadas como `statusRevisao: 'pendente'`).
    * **Aprovar DenÃºncia:** Aplicar uma advertÃªncia ao utilizador denunciado.
    * **Rejeitar DenÃºncia:** Marcar a denÃºncia como resolvida sem aÃ§Ã£o.
    * OpÃ§Ã£o para simular uma denÃºncia manualmente atravÃ©s do painel.

## Notas Importantes e ConsideraÃ§Ãµes

* **SeguranÃ§a da Conta WhatsApp:** O uso de bibliotecas como `whatsapp-web.js` nÃ£o Ã© oficialmente suportado pelo WhatsApp e acarreta o risco de bloqueio da conta. Utilize um nÃºmero de telefone dedicado e nÃ£o o seu principal. Evite spam ou comportamento abusivo atravÃ©s do bot.
* **PermissÃµes do Bot:** Para que o bot possa apagar mensagens ou remover/adicionar participantes, ele precisa de ter permissÃµes de administrador no grupo do WhatsApp.
* **Estabilidade:** A biblioteca `whatsapp-web.js` depende da interface do WhatsApp Web, que pode mudar e, ocasionalmente, quebrar a funcionalidade da biblioteca atÃ© que seja atualizada.
* **PersistÃªncia de Dados:** Os dados sÃ£o guardados em ficheiros JSON. Para aplicaÃ§Ãµes maiores ou mais crÃ­ticas, considere migrar para um sistema de banco de dados mais robusto (ex: SQLite, PostgreSQL, MongoDB).
* **AutenticaÃ§Ã£o do Painel:** A autenticaÃ§Ã£o implementada Ã© bÃ¡sica (utilizador/senha no `.env`). Para produÃ§Ã£o, implemente um sistema de autenticaÃ§Ã£o mais seguro (ex: JWT com hashing de senhas).
* **Mensagens Privadas (PMs):** O envio de PMs pelo bot pode falhar se o utilizador tiver bloqueado o bot ou tiver configuraÃ§Ãµes de privacidade restritivas.
* **ObtenÃ§Ã£o de IDs:** Para adicionar grupos ou banir utilizadores manualmente, precisarÃ¡ dos seus IDs do WhatsApp (ex: `xxxxxxxxxxx@c.us` para utilizadores, `xxxxxxxxxxx-yyyyyyyyyyyy@g.us` para grupos). A funcionalidade de listar grupos do bot ajuda a obter os IDs dos grupos.

## Futuras Melhorias (SugestÃµes)

* Implementar um sistema de recolha de detalhes para o comando `!denuncia` (ex: o bot fazer perguntas sequenciais).
* Melhorar a interface de revisÃ£o de denÃºncias com mais contexto.
* Adicionar a capacidade de editar mensagens de resposta do bot atravÃ©s do painel.
* Integrar um sistema de logging mais avanÃ§ado para o backend.
* Implementar autenticaÃ§Ã£o JWT robusta para a API e o painel.
* Permitir que moderadores executem aÃ§Ãµes diretas (silenciar, expulsar) a partir do painel (com as devidas verificaÃ§Ãµes de permissÃ£o do bot no grupo).
* InternacionalizaÃ§Ã£o (i18n) para o painel.

MIT License

Copyright (c) 2024 @Dguloni

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
